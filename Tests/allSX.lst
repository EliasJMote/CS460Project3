Input file: ./Tests/allSX.ss
   1: ;; File: S19.ss
   2: ;; Authors: Devin Brown and Ryan Moeller
   3: 
   4: ;; Rule 19
   5: ;; Rule 73
   6: ;; Rule 74
   7: (define (f) (if 'modulo '=))
   8: ;; File: S1.ss
   9: ;; Authors: Devin Brown and Ryan Moeller
  10: 
  11: ;; Smallest possible program that compiles
  12: (define (x) x)
  13: ;; File: S25.ss
  14: ;; Authors: Devin Brown and Ryan Moeller
  15: 
  16: ;; Rule 25
  17: (define (x) (cond (x x)))
  18: ;; File: S27.ss
  19: ;; Authors: Devin Brown and Ryan Moeller
  20: 
  21: ;; Rule 27
  22: (define (x) (cons 0 x))
  23: ;; File: S29.ss
  24: ;; Authors: Devin Brown and Ryan Moeller
  25: 
  26: ;; Rule 29
  27: (define (x) (or))
  28: ;; File: S31.ss
  29: ;; Authors: Devin Brown and Ryan Moeller
  30: 
  31: ;; Rule 31
  32: (define (x) (number? x))
  33: ;; File: S33.ss
  34: ;; Authors: Devin Brown and Ryan Moeller
  35: 
  36: ;; Rule 33
  37: (define (x) (list? x))
  38: ;; File: S35.ss
  39: ;; Authors: Devin Brown and Ryan Moeller
  40: 
  41: ;; Rule 35
  42: (define (x) (null? x))
  43: ;; File: S37.ss
  44: ;; Authors: Devin Brown and Ryan Moeller
  45: 
  46: ;; Rule 37
  47: (define (x) (+))
  48: ;; File: S39.ss
  49: ;; Authors: Devin Brown and Ryan Moeller
  50: 
  51: ;; Rule 39
  52: (define (x) (/ x))
  53: ;; File: S41.ss
  54: ;; Authors: Devin Brown and Ryan Moeller
  55: 
  56: ;; Rule 41
  57: (define (x) (modulo x x))
  58: ;; File: S43.ss
  59: ;; Authors: Devin Brown and Ryan Moeller
  60: 
  61: ;; Rule 43
  62: (define (x) (>))
  63: ;; File: S45.ss
  64: ;; Authors: Devin Brown and Ryan Moeller
  65: 
  66: ;; Rule 45
  67: (define (x) (>=))
  68: ;; File: S47.ss
  69: ;; Authors: Devin Brown and Ryan Moeller
  70: 
  71: ;; Rule 47
  72: (define (x) (x))
  73: ;; File: S49.ss
  74: ;; Authors: Devin Brown and Ryan Moeller
  75: 
  76: ;; Rule 49
  77: (define (x) (newline))
  78: ;; File: S19.ss
  79: ;; Authors: Devin Brown and Ryan Moeller
  80: 
  81: ;; Rule 19
  82: ;; Rule 73
  83: ;; Rule 74
  84: (define (f) (if 'modulo '=))
  85: (define (isList a) (if (list? a) a 'param_passed_is_not_list)) ;rule 24 ; rule 33(define (carList a) (car a)) ;rule 26(define (PositiveNumber a) (and (number? a) (<= 0 a))) ;rule 28 (define (NotList a) (not (list? a))) ; rule 30;follow actual  structure, all start with define 
  86: (define (isSymbol a) (symbol? a)) ; rule 32(define (isZero a) (zero? a)) ;rule 34(define(isString a) (string? a)) ;rule 36(define(Sub a b) (- a b)) ;rule 38(define(Mult a b) (* a b)) ;rule 40(define(EqaulTo a b) (= a b)) ; rule 42(define(LessThan a b) ( < a b));rule 44(define(LessThanEqual a b) ( <= a b )) ;rule 46(define(DisplayZ a) (display a));rule 48(define (HelloWorld) 'HelloWorld) ; rule53(define (square) '*) ;rule72(define (greater) '>);; File: U25.ss
  87: ;; Group U
  88: 
  89: (define (a)
  90:   (cond (a b)
  91: 	(else c)
  92: 	)
  93:   )
  94: ;; File: U27.ss
  95: ;; Group U
  96: 
  97: (define (a)
  98:   (cons a b)
  99:   )
 100: ;; File: U29.ss
 101: ;; Group U
 102: 
 103: (define (a)
 104:   (or b)
 105:   )
 106: ;; File: U31.ss
 107: ;; Group U
 108: 
 109: (define (a)
 110:   (number? a)
 111:   )
 112: ;; File: U33.ss
 113: ;; Group U
 114: 
 115: (define (a)
 116:   (list? 9)
 117:   )
 118: ;; File U35.ss
 119: ;; Group U
 120: 
 121: (define (a)
 122:   (null? 9)
 123:   )
 124: (define (add a b) (+))(define (divide a b) (/ a b))
 125: (define (mod a b)
 126:   (modulo a b)
 127:   )
 128: (define (greater_than a b) (>))(define (greater_equal a b) (>=))(define (ident) (IDENT_T))(define (nwln) (NEWLINE_T))
 129: (define (if_token) 'if)
 130: (define (minus a) '-)
 131: (define (gte_token) '>=)
 132: (define (i) i)(define (j) j)
 133: (define (i) (if i i (i)))
 134: (define (i) (cond (i i)))
 135: (define (i) (car (car (i))))
 136: (define (i) (cons (cons i i) i))
 137: (define (i) (or i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i))
 138: (define (i j) i j)
 139: (define (i) (not i))
 140: (define (mod i j) (modulo i i))
 141: (define (i) 'display) (define (i) '+) (define (i) '<=)
 142: (define (rule25) (cond ((=) 'yeah ))) 	; Rule 25
 143: (define (rule27) (const '(a) '(b))) 	; Rule 27
 144: (define (rule29) (or)) 		; Rule 29
 145: (define (rule31) (number? 0)) 		; Rule 31
 146: (define (rule33) (list? 0)) 		; Rule 33
 147: (define (rule35) (null? 0)) 		; Rule 35
 148: (define (rule37) (+)) 			; Rule 37
 149: (define (rule39) (/ 1)) 		; Rule 39
 150: (define (rule41) (modulo 5 2)) 	; Rule 41
 151: (define (rule43) (>)) 			; Rule 43
 152: (define (rule45) (>=)) 		; Rule 45
 153: (define (rule47) (this)) 		; Rule 47
 154: (define (rule49) (newline)) 		; Rule 49
 155: (define (rules80) (cons 'car (cons 'null? 'cond )))
 156: 
 157: (define (a) 10)
 158: (define (a) "a")
 159: (define (a) '2)
 160: (define (a) '2)
 161: (define (a) '())
 162: (define (a) '())
 163: (define (a b) 10)
 164: (define (a) 10)
 165: (define (a) (if 'define 'number?))
0 errors found in input file
