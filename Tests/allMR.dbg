Input file: ./Tests/allMR.ss
   1: (define (m) 10)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         m
	RPAREN_T        )
	NUMLIT_T        10
	RPAREN_T        )
   2: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
   3:     (cond ((list? ls) "is a list")
	LPAREN_T        (
	COND_T          cond
	LPAREN_T        (
	LPAREN_T        (
	LISTP_T         list?
	IDENT_T         ls
	RPAREN_T        )
	STRLIT_T        "is a list"
	RPAREN_T        )
   4:     )
	RPAREN_T        )
   5: )
	RPAREN_T        )
   6: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
   7:     (car ls)
	LPAREN_T        (
	LISTOP_T        car
	IDENT_T         ls
	RPAREN_T        )
   8: )
	RPAREN_T        )
   9: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
  10:     (cons (car ls) ls)
	LPAREN_T        (
	CONS_T          cons
	LPAREN_T        (
	LISTOP_T        car
	IDENT_T         ls
	RPAREN_T        )
	IDENT_T         ls
	RPAREN_T        )
  11: )
	RPAREN_T        )
  12: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
  13:     (AND 1 1)
	LPAREN_T        (
	IDENT_T         AND
	NUMLIT_T        1
	NUMLIT_T        1
	RPAREN_T        )
  14: )
	RPAREN_T        )
  15: (define (functio1 var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         functio1
	IDENT_T         var
	RPAREN_T        )
  16:     (* 2 2)
	LPAREN_T        (
	MULT_T          *
	NUMLIT_T        2
	NUMLIT_T        2
	RPAREN_T        )
  17: )
	RPAREN_T        )
  18: 
  19: (define (function2 var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function2
	IDENT_T         var
	RPAREN_T        )
  20:     (* 1 1)
	LPAREN_T        (
	MULT_T          *
	NUMLIT_T        1
	NUMLIT_T        1
	RPAREN_T        )
  21: )
	RPAREN_T        )
  22: (define (abc) 'list?)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         abc
	RPAREN_T        )
	QUOTE_T         '
	LISTP_T         list?
	RPAREN_T        )
  23: 
  24: (define (a) b)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	IDENT_T         b
	RPAREN_T        )
  25: ;;25
  26: (define (a) (cond (ident ident) (else ident )))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	LPAREN_T        (
	COND_T          cond
	LPAREN_T        (
	IDENT_T         ident
	IDENT_T         ident
	RPAREN_T        )
	LPAREN_T        (
	ELSE_T          else
	IDENT_T         ident
	RPAREN_T        )
	RPAREN_T        )
	RPAREN_T        )
  27: ;;27
  28: (define (a) (cons '(a) '(b)))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	LPAREN_T        (
	CONS_T          cons
	QUOTE_T         '
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	QUOTE_T         '
	LPAREN_T        (
	IDENT_T         b
	RPAREN_T        )
	RPAREN_T        )
	RPAREN_T        )
  29: ;;29
  30: (define (a) (or))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	LPAREN_T        (
	OR_T            or
	RPAREN_T        )
	RPAREN_T        )
  31: ;;31
  32: (define (a) (numberP ident))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	LPAREN_T        (
	IDENT_T         numberP
	IDENT_T         ident
	RPAREN_T        )
	RPAREN_T        )
  33: ;;33
  34: (define (a) (listP ident))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	LPAREN_T        (
	IDENT_T         listP
	IDENT_T         ident
	RPAREN_T        )
	RPAREN_T        )
  35: ;;35
  36: (define (a) (nullP ident))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	LPAREN_T        (
	IDENT_T         nullP
	IDENT_T         ident
	RPAREN_T        )
	RPAREN_T        )
  37: ;;37
  38: (define (a) (+))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	LPAREN_T        (
	PLUS_T          +
	RPAREN_T        )
	RPAREN_T        )
  39: ;;39
  40: (define (a) (/ ident))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	LPAREN_T        (
	DIV_T           /
	IDENT_T         ident
	RPAREN_T        )
	RPAREN_T        )
  41: ;;41
  42: (define (a) (modulo ident ident))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	LPAREN_T        (
	MODULO_T        modulo
	IDENT_T         ident
	IDENT_T         ident
	RPAREN_T        )
	RPAREN_T        )
  43: ;;43
  44: (define (a) (>))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	LPAREN_T        (
	GT_T            >
	RPAREN_T        )
	RPAREN_T        )
  45: ;;45
  46: (define (a) (>=))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	LPAREN_T        (
	GTE_T           >=
	RPAREN_T        )
	RPAREN_T        )
  47: ;;47
  48: (define (a) (a))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	RPAREN_T        )
  49: ;;49
  50: (define (a) (newline))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	LPAREN_T        (
	NEWLINE_T       newline
	RPAREN_T        )
	RPAREN_T        )
  51: (define (a) '(and)'(zero?)'(else))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	QUOTE_T         '
	LPAREN_T        (
	AND_T           and
	RPAREN_T        )
	QUOTE_T         '
	LPAREN_T        (
	ZEROP_T         zero?
	RPAREN_T        )
	QUOTE_T         '
	LPAREN_T        (
	ELSE_T          else
	RPAREN_T        )
	RPAREN_T        )
  52: (define (last list)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         last
	IDENT_T         list
	RPAREN_T        )
  53:   (cond ((null? (cdr list)) (car list))
	LPAREN_T        (
	COND_T          cond
	LPAREN_T        (
	LPAREN_T        (
	NULLP_T         null?
	LPAREN_T        (
	LISTOP_T        cdr
	IDENT_T         list
	RPAREN_T        )
	RPAREN_T        )
	LPAREN_T        (
	LISTOP_T        car
	IDENT_T         list
	RPAREN_T        )
	RPAREN_T        )
  54: 	(else (last (cdr list)))
	LPAREN_T        (
	ELSE_T          else
	LPAREN_T        (
	IDENT_T         last
	LPAREN_T        (
	LISTOP_T        cdr
	IDENT_T         list
	RPAREN_T        )
	RPAREN_T        )
	RPAREN_T        )
  55: 	)
	RPAREN_T        )
  56:   )
	RPAREN_T        )
  57: (define (d)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         d
	RPAREN_T        )
  58:   (- 2))
	LPAREN_T        (
	MINUS_T         -
	NUMLIT_T        2
	RPAREN_T        )
	RPAREN_T        )
  59: (define (e)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         e
	RPAREN_T        )
  60:   (*) )
	LPAREN_T        (
	MULT_T          *
	RPAREN_T        )
	RPAREN_T        )
  61: (define (f)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         f
	RPAREN_T        )
  62:   (=) )
	LPAREN_T        (
	EQUALTO_T       =
	RPAREN_T        )
	RPAREN_T        )
  63: (define (g)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         g
	RPAREN_T        )
  64:   (<) )
	LPAREN_T        (
	LT_T            <
	RPAREN_T        )
	RPAREN_T        )
  65: (define (h)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         h
	RPAREN_T        )
  66:   (<=))
	LPAREN_T        (
	LTE_T           <=
	RPAREN_T        )
	RPAREN_T        )
  67: (define (i)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         i
	RPAREN_T        )
  68:   (display 'a))
	LPAREN_T        (
	DISPLAY_T       display
	QUOTE_T         '
	IDENT_T         a
	RPAREN_T        )
	RPAREN_T        )
  69: (define (notZero n)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         notZero
	IDENT_T         n
	RPAREN_T        )
  70:   (not (= n 0))
	LPAREN_T        (
	NOT_T           not
	LPAREN_T        (
	EQUALTO_T       =
	IDENT_T         n
	NUMLIT_T        0
	RPAREN_T        )
	RPAREN_T        )
  71:   )
	RPAREN_T        )
  72: (define (symbolCheck)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         symbolCheck
	RPAREN_T        )
  73:   (symbol? 'a))
	LPAREN_T        (
	SYMBOLP_T       symbol?
	QUOTE_T         '
	IDENT_T         a
	RPAREN_T        )
	RPAREN_T        )
  74: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
  75:     (cond ((list? ls) "is a list")
	LPAREN_T        (
	COND_T          cond
	LPAREN_T        (
	LPAREN_T        (
	LISTP_T         list?
	IDENT_T         ls
	RPAREN_T        )
	STRLIT_T        "is a list"
	RPAREN_T        )
  76:     )
	RPAREN_T        )
  77: )
	RPAREN_T        )
  78: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
  79:     (car ls)
	LPAREN_T        (
	LISTOP_T        car
	IDENT_T         ls
	RPAREN_T        )
  80: )
	RPAREN_T        )
  81: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
  82:     (cons (car ls) ls)
	LPAREN_T        (
	CONS_T          cons
	LPAREN_T        (
	LISTOP_T        car
	IDENT_T         ls
	RPAREN_T        )
	IDENT_T         ls
	RPAREN_T        )
  83: )
	RPAREN_T        )
  84: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
  85:     (AND 1 1)
	LPAREN_T        (
	IDENT_T         AND
	NUMLIT_T        1
	NUMLIT_T        1
	RPAREN_T        )
  86: )
	RPAREN_T        )
  87: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
  88:     (OR 1 1)
	LPAREN_T        (
	IDENT_T         OR
	NUMLIT_T        1
	NUMLIT_T        1
	RPAREN_T        )
  89: )
	RPAREN_T        )
  90: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
  91:     (NOT (= 1 1))
	LPAREN_T        (
	IDENT_T         NOT
	LPAREN_T        (
	EQUALTO_T       =
	NUMLIT_T        1
	NUMLIT_T        1
	RPAREN_T        )
	RPAREN_T        )
  92: )
	RPAREN_T        )
  93: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
  94:     (number? 1)
	LPAREN_T        (
	NUMBERP_T       number?
	NUMLIT_T        1
	RPAREN_T        )
  95: )
	RPAREN_T        )
  96: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
  97:     (symbol? var)
	LPAREN_T        (
	SYMBOLP_T       symbol?
	IDENT_T         var
	RPAREN_T        )
  98: )
	RPAREN_T        )
  99: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
 100:     (list? ls)
	LPAREN_T        (
	LISTP_T         list?
	IDENT_T         ls
	RPAREN_T        )
 101: )
	RPAREN_T        )
 102: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
 103:     (zero? 0)
	LPAREN_T        (
	ZEROP_T         zero?
	NUMLIT_T        0
	RPAREN_T        )
 104: )
	RPAREN_T        )
 105: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
 106:     (null? ls)
	LPAREN_T        (
	NULLP_T         null?
	IDENT_T         ls
	RPAREN_T        )
 107: )
	RPAREN_T        )
 108: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
 109:     (string? "asf")
	LPAREN_T        (
	STRINGP_T       string?
	STRLIT_T        "asf"
	RPAREN_T        )
 110: )
	RPAREN_T        )
 111: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
 112:     (+ 1 1)
	LPAREN_T        (
	PLUS_T          +
	NUMLIT_T        1
	NUMLIT_T        1
	RPAREN_T        )
 113: )
	RPAREN_T        )
 114: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
 115:     (- 1 1)
	LPAREN_T        (
	MINUS_T         -
	NUMLIT_T        1
	NUMLIT_T        1
	RPAREN_T        )
 116: )
	RPAREN_T        )
 117: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
 118:     (/ 4 2)
	LPAREN_T        (
	DIV_T           /
	NUMLIT_T        4
	NUMLIT_T        2
	RPAREN_T        )
 119: )
	RPAREN_T        )
 120: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
 121:     (* 2 2)
	LPAREN_T        (
	MULT_T          *
	NUMLIT_T        2
	NUMLIT_T        2
	RPAREN_T        )
 122: )
	RPAREN_T        )
 123: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
 124:     (modulo 4 2)
	LPAREN_T        (
	MODULO_T        modulo
	NUMLIT_T        4
	NUMLIT_T        2
	RPAREN_T        )
 125: )
	RPAREN_T        )
 126: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
 127:     (= 1 1)
	LPAREN_T        (
	EQUALTO_T       =
	NUMLIT_T        1
	NUMLIT_T        1
	RPAREN_T        )
 128: )
	RPAREN_T        )
 129: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
 130:     (> 2 1)
	LPAREN_T        (
	GT_T            >
	NUMLIT_T        2
	NUMLIT_T        1
	RPAREN_T        )
 131: )
	RPAREN_T        )
 132: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
 133:     (< 1 2)
	LPAREN_T        (
	LT_T            <
	NUMLIT_T        1
	NUMLIT_T        2
	RPAREN_T        )
 134: )
	RPAREN_T        )
 135: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
 136:     (>= 2 2)
	LPAREN_T        (
	GTE_T           >=
	NUMLIT_T        2
	NUMLIT_T        2
	RPAREN_T        )
 137: )
	RPAREN_T        )
 138: (define (function var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	IDENT_T         var
	RPAREN_T        )
 139:     (<= 2 2)
	LPAREN_T        (
	LTE_T           <=
	NUMLIT_T        2
	NUMLIT_T        2
	RPAREN_T        )
 140: )
	RPAREN_T        )
 141: (define (functio1 var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         functio1
	IDENT_T         var
	RPAREN_T        )
 142:     (* 2 2)
	LPAREN_T        (
	MULT_T          *
	NUMLIT_T        2
	NUMLIT_T        2
	RPAREN_T        )
 143: )
	RPAREN_T        )
 144: 
 145: (define (function2 var)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function2
	IDENT_T         var
	RPAREN_T        )
 146:     (* 1 1)
	LPAREN_T        (
	MULT_T          *
	NUMLIT_T        1
	NUMLIT_T        1
	RPAREN_T        )
 147: )
	RPAREN_T        )
 148: (define (function)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	RPAREN_T        )
 149:     'newline
	QUOTE_T         '
	NEWLINE_T       newline
 150: )
	RPAREN_T        )
 151: (define (function)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	RPAREN_T        )
 152:     'string?
	QUOTE_T         '
	STRINGP_T       string?
 153: )
	RPAREN_T        )
 154: (define (function)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         function
	RPAREN_T        )
 155:     ''a
	QUOTE_T         '
	QUOTE_T         '
	IDENT_T         a
 156: )
	RPAREN_T        )
 157: ; Rule 24
 158: (define (rule_24_a) (if (> 3 4) 2 3))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_24_a
	RPAREN_T        )
	LPAREN_T        (
	IF_T            if
	LPAREN_T        (
	GT_T            >
	NUMLIT_T        3
	NUMLIT_T        4
	RPAREN_T        )
	NUMLIT_T        2
	NUMLIT_T        3
	RPAREN_T        )
	RPAREN_T        )
 159: (define (rule_24_b) (if (< 3 4) 'true 'false))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_24_b
	RPAREN_T        )
	LPAREN_T        (
	IF_T            if
	LPAREN_T        (
	LT_T            <
	NUMLIT_T        3
	NUMLIT_T        4
	RPAREN_T        )
	QUOTE_T         '
	IDENT_T         true
	QUOTE_T         '
	IDENT_T         false
	RPAREN_T        )
	RPAREN_T        )
 160: (define (rule_24_c) (if (null? '()) 'is_null 'not_null))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_24_c
	RPAREN_T        )
	LPAREN_T        (
	IF_T            if
	LPAREN_T        (
	NULLP_T         null?
	QUOTE_T         '
	LPAREN_T        (
	RPAREN_T        )
	RPAREN_T        )
	QUOTE_T         '
	IDENT_T         is_null
	QUOTE_T         '
	IDENT_T         not_null
	RPAREN_T        )
	RPAREN_T        )
 161: (define (rule_24_d) (if (zero? '3) 'is_zero 'not_zero))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_24_d
	RPAREN_T        )
	LPAREN_T        (
	IF_T            if
	LPAREN_T        (
	ZEROP_T         zero?
	QUOTE_T         '
	NUMLIT_T        3
	RPAREN_T        )
	QUOTE_T         '
	IDENT_T         is_zero
	QUOTE_T         '
	IDENT_T         not_zero
	RPAREN_T        )
	RPAREN_T        )
 162: ; Rule 26
 163: (define (rule_26_a) (car '(a)))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_26_a
	RPAREN_T        )
	LPAREN_T        (
	LISTOP_T        car
	QUOTE_T         '
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	RPAREN_T        )
	RPAREN_T        )
 164: (define (rule_26_b) (cdr '(a)))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_26_b
	RPAREN_T        )
	LPAREN_T        (
	LISTOP_T        cdr
	QUOTE_T         '
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	RPAREN_T        )
	RPAREN_T        )
 165: (define (rule_26_c) (car '((a)b)))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_26_c
	RPAREN_T        )
	LPAREN_T        (
	LISTOP_T        car
	QUOTE_T         '
	LPAREN_T        (
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	IDENT_T         b
	RPAREN_T        )
	RPAREN_T        )
	RPAREN_T        )
 166: (define (rule_26_d) (cdr '((a)b)))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_26_d
	RPAREN_T        )
	LPAREN_T        (
	LISTOP_T        cdr
	QUOTE_T         '
	LPAREN_T        (
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	IDENT_T         b
	RPAREN_T        )
	RPAREN_T        )
	RPAREN_T        )
 167: (define (rule_26_e) (cadr '((a)b)))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_26_e
	RPAREN_T        )
	LPAREN_T        (
	LISTOP_T        cadr
	QUOTE_T         '
	LPAREN_T        (
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	IDENT_T         b
	RPAREN_T        )
	RPAREN_T        )
	RPAREN_T        )
 168: (define (rule_26_f) (cddr '((a)b)))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_26_f
	RPAREN_T        )
	LPAREN_T        (
	LISTOP_T        cddr
	QUOTE_T         '
	LPAREN_T        (
	LPAREN_T        (
	IDENT_T         a
	RPAREN_T        )
	IDENT_T         b
	RPAREN_T        )
	RPAREN_T        )
	RPAREN_T        )
 169: ; Rule 28
 170: (define (rule_28_a) (and))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_28_a
	RPAREN_T        )
	LPAREN_T        (
	AND_T           and
	RPAREN_T        )
	RPAREN_T        )
 171: ; Rule 30
 172: (define (rule_30_a) (not (< 4 3)))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_30_a
	RPAREN_T        )
	LPAREN_T        (
	NOT_T           not
	LPAREN_T        (
	LT_T            <
	NUMLIT_T        4
	NUMLIT_T        3
	RPAREN_T        )
	RPAREN_T        )
	RPAREN_T        )
 173: (define (rule_30_b) (not (and (= 3 3) (< 2 3))))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_30_b
	RPAREN_T        )
	LPAREN_T        (
	NOT_T           not
	LPAREN_T        (
	AND_T           and
	LPAREN_T        (
	EQUALTO_T       =
	NUMLIT_T        3
	NUMLIT_T        3
	RPAREN_T        )
	LPAREN_T        (
	LT_T            <
	NUMLIT_T        2
	NUMLIT_T        3
	RPAREN_T        )
	RPAREN_T        )
	RPAREN_T        )
	RPAREN_T        )
 174: ; Rule 32
 175: (define (rule_32_a) (symbol? 'a))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_32_a
	RPAREN_T        )
	LPAREN_T        (
	SYMBOLP_T       symbol?
	QUOTE_T         '
	IDENT_T         a
	RPAREN_T        )
	RPAREN_T        )
 176: ; Rule 34
 177: (define (rule_34_a) (zero? 0))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_34_a
	RPAREN_T        )
	LPAREN_T        (
	ZEROP_T         zero?
	NUMLIT_T        0
	RPAREN_T        )
	RPAREN_T        )
 178: ; Rule 36
 179: (define (rule_36_a) (string? "hello, world"))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_36_a
	RPAREN_T        )
	LPAREN_T        (
	STRINGP_T       string?
	STRLIT_T        "hello, world"
	RPAREN_T        )
	RPAREN_T        )
 180: ; Rule 38
 181: (define (rule_38_a) (- 4 2))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_38_a
	RPAREN_T        )
	LPAREN_T        (
	MINUS_T         -
	NUMLIT_T        4
	NUMLIT_T        2
	RPAREN_T        )
	RPAREN_T        )
 182: ; Rule 40
 183: (define (rule_40_a) (* 1 2))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_40_a
	RPAREN_T        )
	LPAREN_T        (
	MULT_T          *
	NUMLIT_T        1
	NUMLIT_T        2
	RPAREN_T        )
	RPAREN_T        )
 184: (define (rule_40_b) (*))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_40_b
	RPAREN_T        )
	LPAREN_T        (
	MULT_T          *
	RPAREN_T        )
	RPAREN_T        )
 185: ; Rule 42
 186: (define (rule_42_a) (= 2 2))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_42_a
	RPAREN_T        )
	LPAREN_T        (
	EQUALTO_T       =
	NUMLIT_T        2
	NUMLIT_T        2
	RPAREN_T        )
	RPAREN_T        )
 187: (define (rule_42_b) (=))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_42_b
	RPAREN_T        )
	LPAREN_T        (
	EQUALTO_T       =
	RPAREN_T        )
	RPAREN_T        )
 188: ; Rule 44
 189: (define (rule_44_a) (< 3 4))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_44_a
	RPAREN_T        )
	LPAREN_T        (
	LT_T            <
	NUMLIT_T        3
	NUMLIT_T        4
	RPAREN_T        )
	RPAREN_T        )
 190: (define (rule_44_b) (<))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_44_b
	RPAREN_T        )
	LPAREN_T        (
	LT_T            <
	RPAREN_T        )
	RPAREN_T        )
 191: ; Rule 46
 192: (define (rule_46_a) (<= 3 3))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_46_a
	RPAREN_T        )
	LPAREN_T        (
	LTE_T           <=
	NUMLIT_T        3
	NUMLIT_T        3
	RPAREN_T        )
	RPAREN_T        )
 193: (define (rule_46_b) (<=))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_46_b
	RPAREN_T        )
	LPAREN_T        (
	LTE_T           <=
	RPAREN_T        )
	RPAREN_T        )
 194: ; Rule 48
 195: (define (rule_48_a) (display "0118999\n"))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_48_a
	RPAREN_T        )
	LPAREN_T        (
	DISPLAY_T       display
	STRLIT_T        "0118999\n"
	RPAREN_T        )
	RPAREN_T        )
 196: (define (rule_48_b) (display 0118999))
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rule_48_b
	RPAREN_T        )
	LPAREN_T        (
	DISPLAY_T       display
	NUMLIT_T        0118999
	RPAREN_T        )
	RPAREN_T        )
 197: (define (rules_54_71_76_a arg1 arg2) 
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         rules_54_71_76_a
	IDENT_T         arg1
	IDENT_T         arg2
	RPAREN_T        )
 198: 	(if (number? arg1)
	LPAREN_T        (
	IF_T            if
	LPAREN_T        (
	NUMBERP_T       number?
	IDENT_T         arg1
	RPAREN_T        )
 199: 		(if (and (> arg1 0) (list? '(< arg1 10)))
	LPAREN_T        (
	IF_T            if
	LPAREN_T        (
	AND_T           and
	LPAREN_T        (
	GT_T            >
	IDENT_T         arg1
	NUMLIT_T        0
	RPAREN_T        )
	LPAREN_T        (
	LISTP_T         list?
	QUOTE_T         '
	LPAREN_T        (
	LT_T            <
	IDENT_T         arg1
	NUMLIT_T        10
	RPAREN_T        )
	RPAREN_T        )
	RPAREN_T        )
 200: 			'(cons (/ arg1 2) arg2)
	QUOTE_T         '
	LPAREN_T        (
	CONS_T          cons
	LPAREN_T        (
	DIV_T           /
	IDENT_T         arg1
	NUMLIT_T        2
	RPAREN_T        )
	IDENT_T         arg2
	RPAREN_T        )
 201: 			'()
	QUOTE_T         '
	LPAREN_T        (
	RPAREN_T        )
 202: 		)
	RPAREN_T        )
 203: 		"Argument 1 should be a number\n"	
	STRLIT_T        "Argument 1 should be a number\n"
 204: 	)
	RPAREN_T        )
 205: )
	RPAREN_T        )
 206: 
 207: ;(display (rules_54-71-76_a 4 '(a b c)))
	EOF_T           
0 errors found in input file
